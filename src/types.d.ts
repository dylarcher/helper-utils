// Browser utilities type definitions
export declare function addClass(element: Element, ...classNames: string[]): void;
export declare function copyToClipboardAsync(text: string): Promise<void>;
export declare function createElement(tagName: string, attributes?: Record<string, any>, children?: string | Node | Array<string | Node>): Element;
export declare function debounce<T extends (...args: any[]) => any>(func: T, delay: number): (...args: Parameters<T>) => void;
export declare function fetchJSON(url: string, options?: RequestInit): Promise<any>;
export declare function findClosest(element: Element, selector: string): Element | null;
export declare function getCookie(name: string): string | null;
export declare function getGlobal(): typeof globalThis;
export declare function getLocalStorageJSON(key: string): any | null;
export declare function getOSInfo(): { platform: string; architecture: string; type: string; release: string };
export declare function getStyle(element: Element, pseudoElt?: string): CSSStyleDeclaration | null;
export declare function hasClass(element: Element, className: string): boolean;
export declare function hideElement(element: HTMLElement): void;
export declare function once(element: Element, eventType: string, listener: EventListener, options?: AddEventListenerOptions): void;
export declare function onDelegate(parentElement: Element, eventType: string, selector: string, callback: EventListener, options?: AddEventListenerOptions): void;
export declare function parseQueryParams(queryString?: string): Record<string, string>;
export declare function querySelectorWrapper(selector: string, container?: Element | Document): Element | null;
export declare function querySelectorAllWrapper(selector: string, container?: Element | Document): Element[];
export declare function removeClass(element: Element, ...classNames: string[]): void;
export declare function removeElement(element: Element): void;
export declare function setAttribute(element: Element, attributeName: string, value: string): void;
export declare function setLocalStorageJSON(key: string, value: any): boolean;
export declare function setStyle(element: HTMLElement, property: string | Record<string, string>, value?: string): void;
export declare function throttle<T extends (...args: any[]) => any>(func: T, limit: number): (...args: Parameters<T>) => void;
export declare function toggleClass(element: Element, className: string, force?: boolean): void;
export declare function uuid(): string;

// System utilities type definitions
export declare function createDirectory(dirPath: string, options?: { recursive?: boolean; mode?: number }): Promise<void>;
export declare function decrypt(encryptedTextWithIv: string, key: string): string;
export declare function encrypt(text: string, key: string, iv?: string): string;
export declare function env(key: string, defaultValue?: string): string | undefined;
export declare function execAsync(command: string, options?: any): Promise<{ stdout: string; stderr: string }>;
export declare function fileExists(filePath: string): boolean;
export declare function generateHash(data: string, algorithm?: string, encoding?: string): string;
export declare function getBasename(p: string, ext?: string): string;
export declare function getCPUInfo(): any[];
export declare function getDirname(p: string): string;
export declare function getExtension(p: string): string;
export declare function getHostname(): string;
export declare function getMemoryInfo(): { totalMemory: number; freeMemory: number };
export declare function getNetworkInterfaces(): any;
export declare function isDirectory(dirPath: string): boolean;
export declare function joinPaths(...paths: string[]): string;
export declare function listDirectoryContents(dirPath: string): Promise<string[]>;
export declare function readFileAsync(filePath: string, encoding?: string): Promise<string>;
export declare function removeDirectory(dirPath: string, options?: { recursive?: boolean; force?: boolean }): Promise<void>;
export declare function resolvePath(...paths: string[]): string;
export declare function writeFileAsync(filePath: string, data: string, encoding?: string): Promise<void>;