---
name: PR Integrate

on:
  workflow_run:
    workflows:
      - "PR Build"
    types:
      - completed

env:
  GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GIT_ACTION: ${{ github.event.workflow_run.id }}

jobs:
  integrate:
    name: Integrate, Commit, Version, and Package
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    permissions:
      contents: write
      packages: write

    steps:
      - name: Download PR Metadata Artifact
        uses: dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5
        with:
          workflow_conclusion: success
          run_id: ${{ env.GIT_ACTION }}
          name: pr-details-${{ env.GIT_ACTION }}
          path: ${{ runner.temp }}/artifacts/pr_details_artifact
          github_token: ${{ env.GIT_TOKEN }}
          repo: ${{ github.repository }}
          if_no_artifact_found: fail

      - name: Debug Artifact Contents
        run: |
          ARTIFACT_DIR="${{ runner.temp }}/artifacts/pr_details_artifact"
          echo "=== Artifact Directory Debug ==="
          echo "Artifact directory: $ARTIFACT_DIR"
          if [ -d "$ARTIFACT_DIR" ]; then
            echo "Directory exists. Contents:"
            ls -la "$ARTIFACT_DIR"

            for file in GPR_INT HEAD_REF HEAD_SHA; do
              if [ -f "$ARTIFACT_DIR/$file" ]; then
                echo "=== $file ==="
                echo "Size: $(wc -c < "$ARTIFACT_DIR/$file") bytes"
                echo "Content (raw):"
                cat "$ARTIFACT_DIR/$file"
                echo ""
                echo "Content (hex dump):"
                cat "$ARTIFACT_DIR/$file" | hexdump -C
                echo ""
              else
                echo "ERROR: $file does not exist!"
              fi
            done
          else
            echo "ERROR: Artifact directory does not exist!"
            echo "Available directories in ${{ runner.temp }}/artifacts/:"
            ls -la "${{ runner.temp }}/artifacts/" || echo "Artifacts directory not found"
          fi

      - name: Load PR Metadata into Environment
        id: pr_vars
        run: |
          ARTIFACT_DIR="${{ runner.temp }}/artifacts/pr_details_artifact"

          missing_files=()
          for file in GPR_INT HEAD_REF HEAD_SHA; do
            if [ ! -f "$ARTIFACT_DIR/$file" ]; then
              missing_files+=("$file")
            fi
          done

          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "Error: Required artifact files are missing: ${missing_files[*]}" >&2
            echo "Available files in $ARTIFACT_DIR:"
            ls -la "$ARTIFACT_DIR" || echo "Directory does not exist"
            exit 1
          fi

          GPR_INT=$(cat "$ARTIFACT_DIR/GPR_INT" | tr -d '[:space:]')
          HEAD_REF=$(cat "$ARTIFACT_DIR/HEAD_REF" | tr -d '[:space:]')
          HEAD_SHA=$(cat "$ARTIFACT_DIR/HEAD_SHA" | tr -d '[:space:]')

          echo "=== Loaded Values ==="
          echo "GPR_INT: '$GPR_INT' (length: ${#GPR_INT})"
          echo "HEAD_REF: '${{ steps.pr_vars.outputs.HEAD_REF }}' (length: ${#HEAD_REF})"
          echo "HEAD_SHA: '${{ steps.pr_vars.outputs.HEAD_SHA }}' (length: ${#HEAD_SHA})"

          if [[ ! "$GPR_INT" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid GPR_INT value: '$GPR_INT'" >&2
            echo "Expected: positive integer" >&2
            exit 1
          fi

          if [[ ! "${{ steps.pr_vars.outputs.HEAD_SHA }}" =~ ^[a-f0-9]{40}$ ]]; then
            echo "Error: Invalid HEAD_SHA value: '${{ steps.pr_vars.outputs.HEAD_SHA }}'" >&2
            echo "Expected: 40-character hexadecimal string (Git SHA-1)" >&2
            exit 1
          fi

          if [[ ! "${{ steps.pr_vars.outputs.HEAD_REF }}" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
            echo "Error: Invalid HEAD_REF value: '${{ steps.pr_vars.outputs.HEAD_REF }}'" >&2
            echo "Expected: branch/tag name with alphanumeric, slash, underscore, hyphen characters" >&2
            exit 1
          fi

          echo "=== Validation Passed ==="
          echo "All metadata values are valid"

          echo "GPR_INT=$GPR_INT" >> $GITHUB_OUTPUT
          echo "HEAD_REF=${{ steps.pr_vars.outputs.HEAD_REF }}" >> $GITHUB_OUTPUT
          echo "HEAD_SHA=${{ steps.pr_vars.outputs.HEAD_SHA }}" >> $GITHUB_OUTPUT

          {
            echo "GPR_INT=$GPR_INT"
            echo "HEAD_REF=${{ steps.pr_vars.outputs.HEAD_REF }}"
            echo "HEAD_SHA=${{ steps.pr_vars.outputs.HEAD_SHA }}"
          } >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "=== Environment Variable Debug ==="
          echo "HEAD_REF from step output: '${{ steps.pr_vars.outputs.HEAD_REF }}'"
          echo "HEAD_SHA from step output: '${{ steps.pr_vars.outputs.HEAD_SHA }}'"
          echo "GPR_INT from step output: '${{ steps.pr_vars.outputs.GPR_INT }}'"
          echo ""
          echo "HEAD_REF from env: '${{ steps.pr_vars.outputs.HEAD_REF }}'"
          echo "HEAD_SHA from env: '${{ steps.pr_vars.outputs.HEAD_SHA }}'"
          echo "GPR_INT from env: '$GPR_INT'"
          echo ""
          echo "Git context:"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow run ID: ${{ github.run_id }}"
          echo "Triggering workflow run ID: ${{ github.event.workflow_run.id }}"

      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_vars.outputs.HEAD_REF }}
          token: ${{ env.GIT_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git User and Synchronize Branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin "https://x-access-token:$GIT_TOKEN@github.com/${{ github.repository }}"

          echo "Debugging git state:"
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "Expected HEAD_SHA: ${{ steps.pr_vars.outputs.HEAD_SHA }}"
          echo "Expected HEAD_REF: ${{ steps.pr_vars.outputs.HEAD_REF }}"

          echo "Fetching all refs..."
          git fetch origin --all --tags

          if ! git cat-file -e "${{ steps.pr_vars.outputs.HEAD_SHA }}" 2>/dev/null; then
            echo "Error: Commit ${{ steps.pr_vars.outputs.HEAD_SHA }} does not exist in the repository" >&2
            exit 1
          fi

          if git show-ref --verify --quiet "refs/remotes/origin/${{ steps.pr_vars.outputs.HEAD_REF }}"; then
            echo "Found remote branch: origin/${{ steps.pr_vars.outputs.HEAD_REF }}"
            git checkout -B "${{ steps.pr_vars.outputs.HEAD_REF }}" "origin/${{ steps.pr_vars.outputs.HEAD_REF }}"
          elif git show-ref --verify --quiet "refs/tags/${{ steps.pr_vars.outputs.HEAD_REF }}"; then
            echo "Found tag: ${{ steps.pr_vars.outputs.HEAD_REF }}"
            git checkout "${{ steps.pr_vars.outputs.HEAD_REF }}"
          else
            echo "Branch or tag ${{ steps.pr_vars.outputs.HEAD_REF }} not found, checking out commit directly"
            git checkout -B "${{ steps.pr_vars.outputs.HEAD_REF }}" "${{ steps.pr_vars.outputs.HEAD_SHA }}"
          fi

          echo "Resetting to exact commit: ${{ steps.pr_vars.outputs.HEAD_SHA }}"
          git reset --hard "${{ steps.pr_vars.outputs.HEAD_SHA }}"

          CURRENT_SHA=$(git rev-parse HEAD)
          if [ "$CURRENT_SHA" != "${{ steps.pr_vars.outputs.HEAD_SHA }}" ]; then
            echo "Error: Failed to checkout correct commit. Expected: ${{ steps.pr_vars.outputs.HEAD_SHA }}, Got: $CURRENT_SHA" >&2
            exit 1
          fi

          echo "Successfully positioned at commit ${{ steps.pr_vars.outputs.HEAD_SHA }} on branch ${{ steps.pr_vars.outputs.HEAD_REF }}"

      - name: Download and Apply Built Code Artifact
        uses: dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5
        with:
          workflow_conclusion: success
          run_id: ${{ env.GIT_ACTION }}
          name: built-repo-${{ env.GIT_ACTION }}
          path: ${{ runner.temp }}/artifacts/built_repo_${{ env.GIT_ACTION }}
          github_token: ${{ env.GIT_TOKEN }}
          repo: ${{ github.repository }}
          if_no_artifact_found: fail

      - name: Apply Built Code from Artifact
        run: |
          BUILT_ARTIFACT_DIR="${{ runner.temp }}/artifacts/built_repo_${{ env.GIT_ACTION }}"

          echo "=== Built Artifact Debug ==="
          echo "Artifact directory: $BUILT_ARTIFACT_DIR"

          if [ ! -d "$BUILT_ARTIFACT_DIR" ]; then
            echo "Error: Built artifact directory does not exist" >&2
            echo "Available directories in ${{ runner.temp }}/artifacts/:"
            ls -la "${{ runner.temp }}/artifacts/" || echo "Artifacts directory not found"
            exit 1
          fi

          echo "Built artifact contents:"
          ls -la "$BUILT_ARTIFACT_DIR"

          if [ ! -f "$BUILT_ARTIFACT_DIR/package.json" ]; then
            echo "Error: package.json is missing from the built artifact" >&2
            exit 1
          fi

          if [ ! -f "$BUILT_ARTIFACT_DIR/package-lock.json" ]; then
            echo "Error: package-lock.json is missing from the built artifact" >&2
            exit 1
          fi

          echo "Copying built files from artifact..."

          cp "$BUILT_ARTIFACT_DIR/package.json" ./
          cp "$BUILT_ARTIFACT_DIR/package-lock.json" ./

          if [ -d "$BUILT_ARTIFACT_DIR/dist" ]; then
            echo "Copying dist directory..."
            cp -r "$BUILT_ARTIFACT_DIR/dist" ./
          fi

          if [ -d "$BUILT_ARTIFACT_DIR/coverage" ]; then
            echo "Copying coverage directory..."
            cp -r "$BUILT_ARTIFACT_DIR/coverage" ./
          fi

          if [ -d "$BUILT_ARTIFACT_DIR/src" ]; then
            echo "Copying updated source files..."
            cp -r "$BUILT_ARTIFACT_DIR/src" ./
          fi

          echo "Built artifact application completed"

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm ci

      - name: Commit and Push Build Changes
        id: build_and_commit
        run: |
          echo "Applying built changes (lint fixes, test coverage, dist generation)…"
          ANY_COMMITS_MADE=false
          git_reset() {
            if [ "$1" = "clear" ]; then
              git reset > /dev/null 2>&1
            elif [ "$1" = "unstage" ] && [ -d "$2" ] && git diff --name-only --staged -- "$2" | grep -q .; then
              echo "Unstaging $2/ for the current commit."
              git reset HEAD -- "$2"
            fi
          }
          echo "Checking for lint/format changes…"
          git_reset clear
          git add .
          git_reset unstage "dist"
          git_reset unstage "coverage"
          if ! git diff --staged --quiet; then
          echo "Committing lint/format changes…"
            git commit -m "fix: aligns syntax to lint and format standards"
            ANY_COMMITS_MADE=true
          else
            echo "No lint/format changes to commit."
          fi
          echo "Checking for test coverage changes…"
          git_reset clear
          if [ -d "coverage" ]; then
            git add coverage/
            if ! git diff --staged --quiet; then
              echo "Committing test coverage results…"
              git commit -m "chore: updates test coverage results"
              ANY_COMMITS_MADE=true
            else
              echo "No new or modified test coverage results to commit."
            fi
          else
            echo "Coverage directory not found in artifact, skipping coverage commit."
          fi
          echo "Checking for dist directory changes…"
          git_reset clear
          if [ -d "dist" ]; then
            git add dist/
            if ! git diff --staged --quiet; then
              echo "Committing dist files…"
              git commit -m "dist: updates type, source-map, and library files"
              ANY_COMMITS_MADE=true
            else
              echo "No new or modified dist files to commit."
            fi
          else
            echo "Dist directory not found in artifact, skipping dist commit."
          fi
          if [ "$ANY_COMMITS_MADE" = true ]; then
            echo "Pushing build changes to ${{ steps.pr_vars.outputs.HEAD_REF }}…"
            git push origin "${{ steps.pr_vars.outputs.HEAD_REF }}"
          else
            echo "No changes were committed by this step."
          fi
          echo "any_commits_made=$ANY_COMMITS_MADE" >> $GITHUB_OUTPUT

      - name: Version, Package, and Publish
        id: version_publish_compress
        run: |
          if [ -z "${{ steps.pr_vars.outputs.HEAD_REF }}" ] || [ -z "$GPR_INT" ]; then
            echo "Error: Required environment variables are missing" >&2
            echo "HEAD_REF: '${{ steps.pr_vars.outputs.HEAD_REF }}'" >&2
            echo "GPR_INT: '$GPR_INT'" >&2
            exit 1
          fi

          if [ ! -d "dist" ] || [ ! -f "package.json" ]; then
            echo "Dist directory or package.json not found. Skipping versioning, publishing, and compression."
            echo "skipped_all=true" >> $GITHUB_OUTPUT; exit 0
          fi; echo "skipped_all=false" >> $GITHUB_OUTPUT

          BRANCH_NAME="${{ steps.pr_vars.outputs.HEAD_REF }}"
          if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
            echo "Invalid branch name format: $BRANCH_NAME" >&2
            exit 1
          fi

          if [[ ! "$GPR_INT" =~ ^[0-9]+$ ]]; then
            echo "Invalid PR number format: $GPR_INT" >&2
            exit 1
          fi

          VERSION_BUMP="patch"

          BRANCH_PATTERNS="feat/=minor,feature/=minor,fix/=patch,hotfix/=patch,major/=major"

          echo "Using branch patterns: $BRANCH_PATTERNS"
          IFS=',' read -r -a patterns <<< "$BRANCH_PATTERNS"
          for pattern in "${patterns[@]}"; do
            IFS='=' read -r prefix bump <<< "$pattern"
            if [[ "$BRANCH_NAME" == $prefix* ]]; then
              VERSION_BUMP="$bump"
              echo "Matched pattern '$prefix' -> version bump: $VERSION_BUMP"
              break
            fi
          done
          echo "Determined version bump: $VERSION_BUMP for branch $BRANCH_NAME"
          echo "Updating package version (triggers postversion script for push & publish)…"
          npm version "$VERSION_BUMP" -m "chore(release): version %s for PR #$GPR_INT"
          echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT

          echo "Creating distribution archives..."
          tar -czf dist.tar.gz dist
          echo "dist_tarball=dist.tar.gz" >> $GITHUB_OUTPUT
          zip -r dist.zip dist
          echo "dist_zip=dist.zip" >> $GITHUB_OUTPUT

          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          if [[ "${{ steps.build_and_commit.outputs.any_commits_made }}" == 'true' ]]; then
            echo "Publishing package to GitHub Packages…"
            npm publish --access public --registry https://npm.pkg.github.com
            echo "Package published successfully."
          else
            echo "No changes to dist files, skipping package publish."
          fi
          echo "Package versioning and publishing completed."
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Upload Distribution Archives Artifact
        if: steps.version_publish_compress.outputs.skipped_all != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: distribution-archives-${{ github.run_id }}
          path: |
            dist.tar.gz
            dist.zip
          if-no-files-found: error
