---
name: PR Integrate

on:
  workflow_run:
    workflows:
      - "PR Build"
    types:
      - completed

env:
  CI: true
  NODE_ENV: production
  NODE_OPTIONS: --max-old-space-size=4096
  GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GIT_REPO: ${{ github.repository }}

jobs:
  integrate:
    name: Integrate, Commit, Version, and Package
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    permissions:
      contents: write
      packages: write

    steps:
      - name: Download PR Metadata Artifact
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          name: pr-details-${{ github.event.workflow_run.id }}
          path: pr_details_artifact

      - name: Load PR Metadata into Environment
        id: pr_vars
        run: |
          GPR_INT=$(cat pr_details_artifact/GPR_INT)
          HEAD_REF=$(cat pr_details_artifact/HEAD_REF)
          HEAD_SHA=$(cat pr_details_artifact/HEAD_SHA)
          echo "GPR_INT=$GPR_INT" >> $GITHUB_ENV
          echo "HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV
          echo "GPR_INT=$GPR_INT" >> $GITHUB_OUTPUT
          echo "head_ref=$HEAD_REF" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT

      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr_vars.outputs.head_ref }}
          token: ${{ env.GIT_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          registry-url: https://registry.npmjs.org
          cache: npm
        env:
          NODE_AUTH_TOKEN: ${{ steps.pr_vars.outputs.NPM_TOKEN }}
      - name: Configure Git User and Synchronize Branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin "https://x-access-token:${{ env.GIT_TOKEN }}@github.com/${{ env.GIT_REPO }}"
          echo "Ensuring branch ${{ steps.pr_vars.outputs.head_ref }} is at commit ${{ steps.pr_vars.outputs.head_sha }}"
          git fetch origin "${{ steps.pr_vars.outputs.head_ref }}"
          git reset --hard "${{ steps.pr_vars.outputs.head_sha }}"

      - name: Download and Apply Built Code Artifact
        uses: dawidd6/action-download-artifact@v11
        with:
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          name: built-repo-${{ github.event.workflow_run.id }}
          path: ./

      - name: Install Dependencies
        run: npm ci

      - name: Commit and Push Build Changes
        id: build_and_commit
        run: |
          echo "Applying built changes (lint fixes, test coverage, dist generation)…"
          ANY_COMMITS_MADE=false

          git_reset() {
            if [ "$1" = "clear" ]; then
              git reset > /dev/null 2>&1
            elif [ "$1" = "unstage" ] && [ -d "$2" ] && git diff --name-only --staged -- "$2" | grep -q .; then
              echo "Unstaging $2/ for the current commit."
              git reset HEAD -- "$2"
            fi
          }

          echo "Checking for lint/format changes…"
          git_reset clear
          git add .
          git_reset unstage "dist"
          git_reset unstage "coverage"
          if ! git diff --staged --quiet; then
            echo "Committing lint/format changes…"
            git commit -m "fix: aligns syntax to lint and format standards"
            ANY_COMMITS_MADE=true
          else
            echo "No lint/format changes to commit."
          fi

          echo "Checking for test coverage changes…"
          git_reset clear
          if [ -d "coverage" ]; then
            git add coverage/
            if ! git diff --staged --quiet; then
              echo "Committing test coverage results…"
              git commit -m "chore: updates test coverage results"
              ANY_COMMITS_MADE=true
            else
              echo "No new or modified test coverage results to commit."
            fi
          else
            echo "Coverage directory not found in artifact, skipping coverage commit."
          fi

          echo "Checking for dist directory changes…"
          git_reset clear
          if [ -d "dist" ]; then
            git add dist/
            if ! git diff --staged --quiet; then
              echo "Committing dist files…"
              git commit -m "dist: updates type, source-map, and library files"
              ANY_COMMITS_MADE=true
            else
              echo "No new or modified dist files to commit."
            fi
          else
            echo "Dist directory not found in artifact, skipping dist commit."
          fi

          if [ "$ANY_COMMITS_MADE" = true ]; then
            echo "Pushing build changes to ${{ steps.pr_vars.outputs.head_ref }}…"
            git push origin "${{ steps.pr_vars.outputs.head_ref }}"
          else
            echo "No changes were committed by this step."
          fi
          echo "any_commits_made=$ANY_COMMITS_MADE" >> $GITHUB_OUTPUT

      - name: Version, Package, and Publish
        id: version_publish_compress
        run: |
          if [ ! -d "dist" ] || [ ! -f "package.json" ]; then
            echo "Dist directory or package.json not found. Skipping versioning, publishing, and compression."
            echo "skipped_all=true" >> $GITHUB_OUTPUT; exit 0
          fi; echo "skipped_all=false" >> $GITHUB_OUTPUT

          BRANCH_NAME="${{ steps.pr_vars.outputs.head_ref }}"; VERSION_BUMP="minor"
          if [[ "$BRANCH_NAME" == fix/* ]]; then VERSION_BUMP="patch"; elif [[ "$BRANCH_NAME" == refac/* ]]; then VERSION_BUMP="major"; fi
          echo "Determined version bump: $VERSION_BUMP for branch $BRANCH_NAME"

          echo "Updating package version (triggers postversion script for push & publish)…"
          npm version $VERSION_BUMP -m "chore(release): version %s for PR #${{ steps.pr_vars.outputs.GPR_INT }}"

          echo "Compressing dist directory…"
          tar -czf dist.tar.gz dist; zip -r dist.zip dist
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`); echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Upload Distribution Archives Artifact
        if: steps.version_publish_compress.outputs.skipped_all != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: distribution-archives-${{ github.run_id }}
          path: |
            dist.tar.gz
            dist.zip
          if-no-files-found: error
